# -----------------------------------------------------------------------------
# JINJA/YAML TEMPLATE FILE FOR STARTUP SCRIPTS
# -----------------------------------------------------------------------------
# Each key in "templates" is a separate Jinja template snippet that can be
# injected into the final startup script. The Python side passes a context
# dictionary to fill in parameters (e.g., "port_mappings", "ephemeral_mounts",
# or "mount_points").
# -----------------------------------------------------------------------------

templates:

  port_forwarding_segment: |
    #!/usr/bin/env bash

    # --- Bash re-exec check ---
    if [ -z "$BASH_VERSION" ]; then
      echo "Re-running this script with /bin/bash..."
      exec /bin/bash "$0" "$@"
    fi
    # --- End re-exec check ---
  
    # Enable strict error checking and debugging
    set -euxo pipefail

    # Ensure required commands are available
    for cmd in dpkg apt-get systemctl openssl sed; do
      command -v "$cmd" >/dev/null 2>&1 || die "Required command '$cmd' not found. Please install it."
    done

    # Helper function for logging with timestamp
    log() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"; }
    die() { log "ERROR: $*"; exit 1; }

    log "Configuring Port Forwarding and Nginx"

    # Update & install nginx only if not already installed
    if ! dpkg -l | grep -q nginx; then
      sudo DEBIAN_FRONTEND=noninteractive apt-get update || die "apt-get update failed"
      sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nginx || die "nginx install failed"
      sudo systemctl enable nginx || die "Failed to enable nginx"
    else
      log "Nginx already installed."
    fi

    log "Generating Self-Signed SSL Certificate"
    sudo mkdir -p /etc/ssl/private
    sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      -keyout /etc/ssl/private/myserver.key \
      -out /etc/ssl/certs/myserver.crt \
      -subj '/CN=localhost' || die "Failed generating SSL certificate"

    # (Optional) Remove default site if it conflicts:
    # sudo rm -f /etc/nginx/sites-enabled/default

    # Disable strict host key checking for foundrypf
    sudo sed -i '/ssh -i $sshKey -nNT -R $port:localhost:$port ubuntu@$bastionHost -p 2222/s/$/ -o StrictHostKeyChecking=no/' /usr/local/bin/foundrypf || \
      log "Warning: updating foundrypf command failed"

    {% for (external_port, internal_port) in port_mappings %}
    log "Setting up foundrypf for external port {{ external_port }} => internal port {{ internal_port }}"
    sudo bash -c "cat <<-'EOF' > /etc/systemd/system/foundrypf_{{ internal_port }}.service
    [Unit]
    Description=Foundry Port Forwarding Service for port {{ internal_port }}
    After=network.target
    Wants=network-online.target

    [Service]
    Type=simple
    User=root
    ExecStart=/usr/local/bin/foundrypf {{ internal_port }}
    Restart=always
    RestartSec=3

    [Install]
    WantedBy=multi-user.target
    EOF" || die "Failed writing systemd unit for port {{ internal_port }}"
    
    sudo systemctl daemon-reload || die "daemon-reload failed"
    sudo systemctl enable foundrypf_{{ internal_port }}.service || die "Enabling foundrypf_{{ internal_port }}.service failed"
    sudo systemctl start foundrypf_{{ internal_port }}.service || die "Starting foundrypf_{{ internal_port }}.service failed"

    log "Creating Nginx config for external port {{ external_port }} => internal port {{ internal_port }}"
    sudo bash -c "cat <<-'EOF' > /etc/nginx/sites-available/port_{{ external_port }}_ssl
    server {
        listen {{ external_port }} ssl;
        listen [::]:{{ external_port }} ssl;
        server_name _;
        ssl_certificate /etc/ssl/certs/myserver.crt;
        ssl_certificate_key /etc/ssl/private/myserver.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://localhost:{{ internal_port }};
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
    EOF" || die "Failed creating Nginx site configuration for external port {{ external_port }}"
    
    sudo ln -sf /etc/nginx/sites-available/port_{{ external_port }}_ssl /etc/nginx/sites-enabled/ || \
      log "Warning: failed linking Nginx config for port {{ external_port }}"
    {% endfor %}

    {% if port_mappings %}
    log "Testing Nginx config"
    sudo nginx -t || die "Nginx config test failed"
    log "Nginx config test passed"

    log "Restarting Nginx to apply port forwarding changes"
    sudo systemctl restart nginx || die "Nginx restart failed"
    {% endif %}


  ephemeral_storage_segment: |
    #!/usr/bin/env bash

    # --- Bash re-exec check ---
    if [ -z "$BASH_VERSION" ]; then
      echo "Re-running this script with /bin/bash..."
      exec /bin/bash "$0" "$@"
    fi
    # --- End re-exec check ---

    set -euxo pipefail

    # Ensure required commands are available
    for cmd in mkdir blkid mkfs.ext4 mount mountpoint chown grep tee; do
      command -v "$cmd" >/dev/null 2>&1 || die "Required command '$cmd' not found. Please install it."
    done

    # Helper functions
    log() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"; }
    die() { log "ERROR: $*"; exit 1; }

    log "Configuring Ephemeral Storage"
    {% for src, dst in ephemeral_mounts.items() %}
    log "Processing ephemeral device '{{ src }}' => mount point '{{ dst }}'"

    # Create the destination directory if it doesn't exist
    sudo mkdir -p "{{ dst }}" || die "Failed to create directory {{ dst }}"

    # Verify that the source is a valid block device
    if [ ! -b "{{ src }}" ]; then
      die "Ephemeral device '{{ src }}' is not a valid block device or does not exist"
    fi

    # Check if the device has a filesystem
    if ! sudo blkid "{{ src }}" >/dev/null 2>&1; then
      log "No filesystem detected on '{{ src }}'; formatting with ext4..."
      sudo mkfs.ext4 -F "{{ src }}" || die "Failed to format device {{ src }}"
    else
      log "Filesystem already exists on '{{ src }}'; skipping format"
    fi

    # Check if already mounted
    if mountpoint -q "{{ dst }}"; then
      log "'{{ dst }}' is already mounted; skipping mount"
    else
      log "Mounting '{{ src }}' at '{{ dst }}'"
      sudo mount "{{ src }}" "{{ dst }}" || die "Failed to mount {{ src }} on {{ dst }}"

      # --- NOTE: (Default, but optional) Auto-Mount on Reboot ---
      UUID=$(sudo blkid -s UUID -o value "{{ src }}" || die "Failed to retrieve UUID for '{{ src }}'")
      if ! grep -q "UUID=$UUID" /etc/fstab; then
          log "Adding ephemeral device '{{ src }}' to /etc/fstab for mount point '{{ dst }}'"
          echo "UUID=$UUID {{ dst }} ext4 defaults,nofail,discard 0 2" | sudo tee -a /etc/fstab >/dev/null
      fi
    fi

    log "Changing ownership of '{{ dst }}' to $USER"
    sudo chown -R $USER:$USER "{{ dst }}" || log "Warning: could not change ownership for {{ dst }}"

    log "Ephemeral mount complete: '{{ src }}' => '{{ dst }}'"
    {% endfor %}

  persistent_storage_segment: |
    #!/usr/bin/env bash

    # --- Bash re-exec check ---
    if [ -z "$BASH_VERSION" ]; then
      echo "Re-running this script with /bin/bash..."
      exec /bin/bash "$0" "$@"
    fi
    # --- End re-exec check ---

    set -euxo pipefail

    # Ensure required commands are available
    for cmd in lsblk mkfs.ext4 mount chown grep tee; do
      command -v "$cmd" >/dev/null 2>&1 || die "Required command '$cmd' not found. Please install it."
    done

    log() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"; }
    die() { log "ERROR: $*"; exit 1; }

    log "Configuring Persistent Storage"
    # Enumerate disk devices.
    DISK_DEVS=($(lsblk -dpno NAME,TYPE | grep 'disk' | awk '{print $1}'))
    log "Disk devices found: ${DISK_DEVS[@]}"

    MOUNT_POINTS=({{ mount_points | join(' ') }})

    if [ ${#DISK_DEVS[@]} -lt ${#MOUNT_POINTS[@]} ]; then
        die "Found only ${#DISK_DEVS[@]} disk(s) for the ${#MOUNT_POINTS[@]} mount point(s) provided."
    elif [ ${#DISK_DEVS[@]} -gt ${#MOUNT_POINTS[@]} ]; then
        log "Warning: More disk devices found than mount points provided. Only the first ${#MOUNT_POINTS[@]} disk(s) will be used."
        DISK_DEVS=("${DISK_DEVS[@]:0:${#MOUNT_POINTS[@]}}")
    fi

    for i in "${!DISK_DEVS[@]}"; do
        dev="${DISK_DEVS[$i]}"
        mp="${MOUNT_POINTS[$i]}"

        log "Processing disk '$dev' for mount point '$mp'"

        # Ensure mount directory exists
        sudo mkdir -p "$mp" || die "Failed to create directory '$mp'"

        # Check if disk has a filesystem
        if ! sudo blkid "$dev" >/dev/null 2>&1; then
            log "No filesystem detected on '$dev'; formatting with ext4..."
            sudo mkfs.ext4 -F "$dev" || die "Failed to format '$dev'"
        else
            log "Filesystem already exists on '$dev'; skipping format"
        fi

        # Check if already mounted
        if mountpoint -q "$mp"; then
            log "'$mp' is already mounted; skipping mount"
        else
            log "Mounting '$dev' on '$mp'"
            sudo mount "$dev" "$mp" || die "Failed to mount '$dev' on '$mp'"
            log "Successfully mounted '$dev' on '$mp'"
        fi

        sudo chown -R $USER:$USER "$mp" || log "Warning: could not change ownership for '$mp'"

        # Update /etc/fstab if missing
        UUID=$(sudo blkid -s UUID -o value "$dev" || die "Failed to retrieve UUID for '$dev'")
        if ! grep -q "UUID=$UUID" /etc/fstab; then
            log "Adding 'UUID=$UUID $mp ext4 defaults 0 2' to /etc/fstab"
            echo "UUID=$UUID $mp ext4 defaults 0 2" | sudo tee -a /etc/fstab >/dev/null
        else
            log "fstab already contains UUID=$UUID; skipping"
        fi

        log "Finished processing persistent disk '$dev' => '$mp'"
    done

  container_image_segment: |
    # Ensure required commands are available
    for cmd in apt-get docker systemctl; do
      command -v "$cmd" >/dev/null 2>&1 || { echo "Required command '$cmd' not found. Please install it."; exit 1; }
    done

    echo "=== Setting Up Our Docker Environment ==="
    if ! command -v docker >/dev/null 2>&1; then
      echo "Docker not found; installing Docker..."
      sudo apt-get update && sudo apt-get install -y docker.io
      sudo systemctl start docker
      sudo systemctl enable docker
    else
      echo "Docker is already installed."
    fi

    echo "=== Processing Container Image ==="
    {% if build_context %}
    echo "Building Docker image '{{ image_name }}' from build context '{{ build_context }}'"
    cd {{ build_context }}
    sudo docker build -t {{ image_name }} .
    {% else %}
    echo "Pulling Docker image '{{ image_name }}'"
    sudo docker pull {{ image_name }}
    {% endif %}

    echo "=== Running Docker Container ==="
    sudo docker run -d {{ run_options | default('') }} {{ image_name }}

# -----------------------------------------------------------------------------
# BOOTSTRAP SCRIPT TEMPLATE
# -----------------------------------------------------------------------------
# This template generates a small bootstrap script that handles the decoding
# and execution of a larger, compressed and base64-encoded startup script.
# The 'encoded_script' variable will be passed from the Python code.
# -----------------------------------------------------------------------------

  bootstrap_script_segment: |
    #!/usr/bin/env bash
  
    # --- Bash re-exec check ---
    if [ -z "$BASH_VERSION" ]; then
      echo "Re-running this script with /bin/bash..."
      exec /bin/bash "$0" "$@"
    fi
    # --- End re-exec check ---
  
    set -euxo pipefail
  
    # Verify that required commands are available
    command -v base64 >/dev/null 2>&1 || { echo "base64 command not found" >&2; exit 1; }
    command -v gunzip >/dev/null 2>&1 || { echo "gunzip command not found" >&2; exit 1; }
    command -v mktemp >/dev/null 2>&1 || { echo "mktemp command not found" >&2; exit 1; }
    
    log() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"; }
    die() { log "ERROR: $*"; exit 1; }
  
    log "Bootstrapping Large Startup Script"
  
    # Write the base64-encoded, gzipped script to a file (gzipped in )
    cat << 'EOF_COMPRESSED' > encoded_script.b64 || die "Failed to write encoded script"
    {{ encoded_script }}
    EOF_COMPRESSED
  
    log "Decoding and verifying the encoded script"
    tmpfile=$(mktemp /tmp/full_script.XXXXXX) || die "Failed to create temporary file"
    base64 -d encoded_script.b64 > "$tmpfile" || { rm -f "$tmpfile"; die "Base64 decoding failed"; }

    log "Verifying gzip integrity of the decoded script"
    gunzip -t "$tmpfile" || { rm -f "$tmpfile"; die "Gzip integrity check failed"; }
    
    log "Decompressing the full startup script"
    gunzip -c "$tmpfile" > full_script.sh || { rm -f "$tmpfile"; die "Failed to decompress the full startup script"; }
    rm -f "$tmpfile"

    chmod +x full_script.sh || die "Failed to make the full script executable"
  
    log "Executing Full Startup Script"
    ./full_script.sh || die "Execution of the full startup script failed"